(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{153:function(a,t,r){"use strict";r.r(t);var v=r(6),s=Object(v.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var a=this,t=a.$createElement,r=a._self._c||t;return r("div",{staticClass:"content"},[r("p"),r("div",{staticClass:"table-of-contents"},[r("ul",[r("li",[r("a",{attrs:{href:"#第一部分：作用域和闭包"}},[a._v("第一部分：作用域和闭包")]),r("ul",[r("li",[r("a",{attrs:{href:"#第一章：作用域是什么"}},[a._v("第一章：作用域是什么")]),r("ul",[r("li",[r("a",{attrs:{href:"#前言"}},[a._v("前言")])]),r("li",[r("a",{attrs:{href:"#概念"}},[a._v("概念")])]),r("li",[r("a",{attrs:{href:"#编译原理"}},[a._v("编译原理")])]),r("li",[r("a",{attrs:{href:"#分词-词法分析"}},[a._v("分词/词法分析")])]),r("li",[r("a",{attrs:{href:"#解析-语法分析"}},[a._v("解析/语法分析")])]),r("li",[r("a",{attrs:{href:"#代码生成"}},[a._v("代码生成")])]),r("li",[r("a",{attrs:{href:"#javascript与传统编译的不同点"}},[a._v("JavaScript与传统编译的不同点")])]),r("li",[r("a",{attrs:{href:"#理解作用域"}},[a._v("理解作用域")])]),r("li",[r("a",{attrs:{href:"#lhs查询"}},[a._v("LHS查询")])])])])])])])]),r("p"),a._v(" "),r("h1",{attrs:{id:"第一部分：作用域和闭包"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#第一部分：作用域和闭包","aria-hidden":"true"}},[a._v("#")]),a._v(" 第一部分：作用域和闭包")]),a._v(" "),r("h2",{attrs:{id:"第一章：作用域是什么"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#第一章：作用域是什么","aria-hidden":"true"}},[a._v("#")]),a._v(" 第一章：作用域是什么")]),a._v(" "),r("h3",{attrs:{id:"前言"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#前言","aria-hidden":"true"}},[a._v("#")]),a._v(" 前言")]),a._v(" "),r("p",[a._v("几乎所有编程语言最基本的功能之一，就是能够储存变量当中的值，并且能在之后对这个值进行访问或修改。事实上，正是这种储存和访问变量的值的能力将"),r("strong",[a._v("状态")]),a._v("带给了程序。而存储变量的这套规则被称为"),r("strong",[a._v("作用域")]),a._v("。")]),a._v(" "),r("h3",{attrs:{id:"概念"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#概念","aria-hidden":"true"}},[a._v("#")]),a._v(" 概念")]),a._v(" "),r("p",[a._v("作用域是"),r("strong",[a._v("规定变量与函数可访问范围的一套规则")])]),a._v(" "),r("h3",{attrs:{id:"编译原理"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#编译原理","aria-hidden":"true"}},[a._v("#")]),a._v(" 编译原理")]),a._v(" "),r("p",[a._v("在传统编译语言的流程中，程序中的一段源代码在执行之前会经历三个步骤，统称为“编译”")]),a._v(" "),r("ol",[r("li",[a._v("分词/词法分析（Tokenizing/Lexing）")]),a._v(" "),r("li",[a._v("解析/语法分析（Parsing）")]),a._v(" "),r("li",[a._v("代码生成")])]),a._v(" "),r("h3",{attrs:{id:"分词-词法分析"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#分词-词法分析","aria-hidden":"true"}},[a._v("#")]),a._v(" 分词/词法分析")]),a._v(" "),r("p",[a._v("这个过程将字符串分解成（对编程语言来说）有意义的代码块。这些代码块被称为"),r("strong",[a._v("词法单元（token）")]),a._v("。例如："),r("code",[a._v("var a = 2;")]),a._v("。这段程序通常会被分解成"),r("code",[a._v("var")]),a._v("、"),r("code",[a._v("a")]),a._v("、"),r("code",[a._v("=")]),a._v("、"),r("code",[a._v("2")]),a._v("、"),r("code",[a._v(";")]),a._v("。空格是否会被当作词法单元，取决于空格在这门语言中是否具有意义。")]),a._v(" "),r("div",{staticClass:"tip custom-block"},[r("p",{staticClass:"custom-block-title"},[a._v("二者差异")]),a._v(" "),r("p",[a._v("分词（tokenizing）和词法分析（Lexing）之间的主要差异在于词法单元的识别是通过"),r("strong",[a._v("有状态")]),a._v("还是"),r("strong",[a._v("无状态")]),a._v("的方式进行的。简单来说，如果词法单元生成器在判断a是一个独立的词法单元还是其他语法单元的一部分时，调用的是有状态的解析规则，那么这个过程就被称为"),r("strong",[a._v("词法分析")]),a._v("。")])]),a._v(" "),r("h3",{attrs:{id:"解析-语法分析"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#解析-语法分析","aria-hidden":"true"}},[a._v("#")]),a._v(" 解析/语法分析")]),a._v(" "),r("p",[a._v("这个过程是将词法单元流（数组）转换成一个由元素逐渐嵌套所组成的代表了程序语法结构的树。这个树被称为**“抽象语法树”**（Abstract Syntax Tree，AST）。")]),a._v(" "),r("p",[r("code",[a._v("var a = 2;")]),a._v("的抽象语法树中可能会有一个叫作VariableDeclaration的顶级节点，接下来是一个叫作Identifier（它的值是a）的子节点，以及一个叫做AssignmentExpression的子节点。AssignmentExpression节点有一个叫作NumericLiteral（它的值是2）的子节点。")]),a._v(" "),r("h3",{attrs:{id:"代码生成"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#代码生成","aria-hidden":"true"}},[a._v("#")]),a._v(" 代码生成")]),a._v(" "),r("p",[a._v("将AST转换成为可执行代码的过程被称为代码生成。这个过程与语言、目标平台等息息相关。")]),a._v(" "),r("p",[a._v("简单来说就是有某种方法可以将"),r("code",[a._v("var a = 2;")]),a._v("的AST转化为一组机器指令，用来创建一个叫作a的变量（包括内存分配等），并将一个值储存在a中。")]),a._v(" "),r("h3",{attrs:{id:"javascript与传统编译的不同点"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#javascript与传统编译的不同点","aria-hidden":"true"}},[a._v("#")]),a._v(" JavaScript与传统编译的不同点")]),a._v(" "),r("ol",[r("li",[a._v("JavaScript 引擎不会有大量的(像其他语言编译器那么多的)时间用来进行优化。")]),a._v(" "),r("li",[a._v("JavaScript与传统的编译语言不同，它不是在构建之前提前编译的，大部分情况下,它是在代码执行前的几微秒(甚至更短)进行编译。JavaScript 引擎用尽了各种办法(比如 JIT，可以延 迟编译甚至实施重编译)来保证性能最佳。")]),a._v(" "),r("li",[a._v("JavaScript的编译结果不能在分布式系统中进行移植。")])]),a._v(" "),r("h3",{attrs:{id:"理解作用域"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#理解作用域","aria-hidden":"true"}},[a._v("#")]),a._v(" 理解作用域")]),a._v(" "),r("h4",{attrs:{id:"演员表"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#演员表","aria-hidden":"true"}},[a._v("#")]),a._v(" 演员表")]),a._v(" "),r("p",[r("strong",[a._v("引擎")])]),a._v(" "),r("p",[a._v("从头到尾负责整个JavaScript程序的编译及执行过程。")]),a._v(" "),r("p",[r("strong",[a._v("编译器")])]),a._v(" "),r("p",[a._v("引擎的好朋友之一，负责语法分析及代码生成等脏活累活。")]),a._v(" "),r("p",[r("strong",[a._v("作用域")])]),a._v(" "),r("p",[a._v("引擎的另一位好朋友，负责收集并维护由所有声明的标识符（变量）组成的一系列查询，并实施一套非常严格的规则，确定当前执行的代码对这些标识符的访问权限。")]),a._v(" "),r("h4",{attrs:{id:"处理var-a-2-流程图"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#处理var-a-2-流程图","aria-hidden":"true"}},[a._v("#")]),a._v(" 处理var a = 2;流程图")]),a._v(" "),r("p",[r("img",{attrs:{src:"https://blog-chara-img.oss-cn-shanghai.aliyuncs.com/blog-img/%E4%BD%A0%E4%B8%8D%E7%9F%A5%E9%81%93%E7%9A%84JavaScript%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/1-1%E4%BB%A3%E7%A0%81%E7%BC%96%E8%AF%91%E6%89%A7%E8%A1%8C%E8%BF%87%E7%A8%8B.jpg",alt:"编译执行过程"}})]),a._v(" "),r("h4",{attrs:{id:"总结"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#总结","aria-hidden":"true"}},[a._v("#")]),a._v(" 总结")]),a._v(" "),r("p",[a._v("变量的赋值操作会执行两个动作，首先编译器会在当前作用域中声明一个变量（如果之前没有声明过），然后在运行时引擎会在作用域中查找该变量，如果能够找到就会对它赋值。")]),a._v(" "),r("h3",{attrs:{id:"lhs查询"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#lhs查询","aria-hidden":"true"}},[a._v("#")]),a._v(" LHS查询")]),a._v(" "),r("p",[a._v("当变量出现在赋值操作的左侧时，引擎会进行 LHS 查询。")]),a._v(" "),r("p",[a._v("RHS")]),a._v(" "),r("p",[a._v("当变量处在赋值操作的右侧时，引擎会进行 RHS 查询。")])])}],!1,null,null,null);s.options.__file="上卷笔记.md";t.default=s.exports}}]);